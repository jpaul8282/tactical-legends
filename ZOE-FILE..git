class VaultOfEchoesScene:
    def __init__(self, screen, scene_manager):
        self.screen = screen
        self.scene_manager = scene_manager
        self.font = pygame.font.Font(None, 36)
        self.trust_score = 82
        self.voice_heard = False

    def setup(self):
        self.bg = pygame.image.load("vault_bg.jpg").convert()
        self.voice_clip = pygame.mixer.Sound("voice_whisper.wav")

    def update(self):
        pass  # Add dynamic lighting or heartbeat pulse here

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        text = "The Vault awaits. Do you trust the voice?"
        rendered = self.font.render(text, True, (255, 255, 255))
        self.screen.blit(rendered, (100, 100))

    def handle_event(self, event):
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_t and self.trust_score > 80:
                self.voice_heard = True
                self.scene_manager.switch_scene("EchoShieldUnlocked")
            elif event.key == pygame.K_s:
                self.scene_manager.switch_scene("FinalLiberationLocked")

class GearUpgradeUI:
    def __init__(self, screen):
        self.screen = screen
        self.font = pygame.font.Font(None, 28)
        self.gear = {
            "Whisper & Roar": {"level": 2, "mods": ["thermal_scope"]},
            "NeuroPulse Arm": {"level": 3, "mods": ["shock_pulse", "grapple_hook"]}
        }

    def render(self):
        self.screen.fill((10, 10, 30))
        y = 100
        for gear_name, stats in self.gear.items():
            label = f"{gear_name} - Level {stats['level']} | Mods: {', '.join(stats['mods'])}"
            rendered = self.font.render(label, True, (0, 255, 180))
            self.screen.blit(rendered, (50, y))
            y += 50

Trust the voice ‚Üí unlock Echo Shield; Silence the voice ‚Üí lock Final Liberation
class ZoesSilenceScene:
    def __init__(self, screen, scene_manager):
        self.screen = screen
        self.scene_manager = scene_manager
        self.font = pygame.font.Font(None, 32)
        self.bg = pygame.image.load("zoe_corridor.jpg").convert()
        self.voice_clip = pygame.mixer.Sound("zoe_voicemail.wav")
        self.played_clip = False

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        text = "The corridor. The child. The silence."
        rendered = self.font.render(text, True, (255, 200, 200))
        self.screen.blit(rendered, (80, 80))

    def handle_event(self, event):
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_v and not self.played_clip:
                self.voice_clip.play()
                self.played_clip = True
            elif event.key == pygame.K_e:
                self.scene_manager.switch_scene("EchoProtocol")

class GearTransition:
    def __init__(self, screen):
        self.screen = screen
        self.alpha = 0
        self.font = pygame.font.Font(None, 28)
        self.gear_name = "NeuroPulse Arm"
        self.upgrade = "Echo Shield"

    def animate(self):
        overlay = pygame.Surface((800, 600))
        overlay.set_alpha(self.alpha)
        overlay.fill((0, 255, 180))
        self.screen.blit(overlay, (0, 0))

        label = f"{self.gear_name} upgraded with {self.upgrade}"
        rendered = self.font.render(label, True, (0, 0, 0))
        self.screen.blit(rendered, (200, 300))

        if self.alpha < 180:
            self.alpha += 5

OISTARIAN_BACKSTORY = {
    "codename": "OISTARIAN",
    "emotional_core": {
        "daughter": "Zoe",
        "last_message": "Dad, I know you‚Äôre scared. But I love you. Come home.",
        "locked_memory": "Voicemail never played. Mission override triggered."
    },
    "gear_sync": {
        "NeuroPulse Arm": {
            "mod": "Echo Shield",
            "trigger": "Zoe‚Äôs voice playback"
        }
    },
    "mission_lock": {
        "Final Liberation": "Locked until voicemail played"
    }
}

class EchoInfiltrationAnimation:
    def __init__(self, screen):
        self.screen = screen
        self.bg_frames = [pygame.image.load(f"vault_frame_{i}.png") for i in range(1, 6)]
        self.current_frame = 0
        self.timer = 0
        self.font = pygame.font.Font(None, 28)
        self.mission_text = "Infiltrating Vault with Mossad clearance..."

    def update(self, dt):
        self.timer += dt
        if self.timer > 0.2:
            self.current_frame = (self.current_frame + 1) % len(self.bg_frames)
            self.timer = 0

    def render(self):
        self.screen.blit(self.bg_frames[self.current_frame], (0, 0))
        rendered = self.font.render(self.mission_text, True, (255, 255, 255))
        self.screen.blit(rendered, (50, 550))

üï∂Ô∏è Mission Context: Mossad Collaboration
| Detail | Description | 
| üß† Mission Name | Echo Protocol | 
| üïµÔ∏è Agency Link | Mossad tactical clearance granted for Vault infiltration | 
| üéØ Objective | Retrieve memory shard tied to Zoe‚Äôs final message | 
| üîí Emotional Trigger | Voiceover playback unlocks Echo Shield and ‚ÄúTrust the Voice‚Äù path | 
| üß¨ Branch Outcome | Unlocks ‚ÄúFinal Liberation‚Äù and OISTARIAN‚Äôs full emotional arc | 

class ShardChamberScene:
    def __init__(self, screen, scene_manager):
        self.screen = screen
        self.scene_manager = scene_manager
        self.font = pygame.font.Font(None, 30)
        self.bg_frames = [pygame.image.load(f"shard_chamber_{i}.png") for i in range(1, 6)]
        self.current_frame = 0
        self.timer = 0
        self.memory_shard = pygame.image.load("zoe_memory_shard.png").convert_alpha()
        self.voice_clip = pygame.mixer.Sound("zoe_final_echo.wav")
        self.played_clip = False

    def update(self, dt):
        self.timer += dt
        if self.timer > 0.3:
            self.current_frame = (self.current_frame + 1) % len(self.bg_frames)
            self.timer = 0

    def render(self):
        self.screen.blit(self.bg_frames[self.current_frame], (0, 0))
        self.screen.blit(self.memory_shard, (300, 200))
        text = "Encrypted Neural Glass: Zoe‚Äôs final echo stored here."
        rendered = self.font.render(text, True, (255, 255, 255))
        self.screen.blit(rendered, (100, 500))

    def handle_event(self, event):
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_v and not self.played_clip:
                self.voice_clip.play()
                self.played_clip = True
            elif event.key == pygame.K_m:
                self.scene_manager.switch_scene("MossadOverlayScene")

OISTARIAN, embedded with Mossad and IDF tactical units
üéûÔ∏è Scene Flow
1. Insertion
- Daylight breach into Nuseirat under Mossad clearance
- OISTARIAN syncs with Yamam unit via encrypted neural link
- Feint operations launched in Bureij and Deir al-Balah to divert Hamas defenses
2. Split Extraction
- Hostages held in two separate civilian buildings
- OISTARIAN leads emotional recon through flashback corridors
- Zoe‚Äôs voiceover triggers Echo Shield activation: ‚ÄúDad, I know you‚Äôre scared‚Ä¶‚Äù
3. Hostage Retrieval
- Four hostages located: Noa Argamani, Almog Meir Jan, Andrey Kozlov, Shlomi Ziv
- OISTARIAN disables biometric locks using neural glass decryption
- Hostages extracted under fire; rescue vehicle disabled mid-evac
4. Final Echo
- OISTARIAN wounded but activates ‚ÄúFinal Liberation‚Äù protocol
- Zoe‚Äôs memory shard pulses in sync with evac heartbeat monitor
- Mission ends with emotional reunion and encrypted log entry: ‚ÄúThe silence is broken.‚Äù
mission_logs = [
    "Vault breach initiated: Nuseirat sector",
    "OISTARIAN synced: Echo Shield active",
    "Hostage biometric locks disabled",
    "Extraction under fire: fallback route engaged",
    "Final Echo triggered: Zoe‚Äôs memory shard pulsing"
]

üéÆ Shard Decryption Mini-Game: ‚ÄúNeural Glass Protocol‚Äù
üß© Gameplay Concept
- Objective: Decode Zoe‚Äôs encrypted memory shard
- Mechanic: Rotate neural glyphs to align emotional frequencies
- Timer: 60 seconds before shard destabilizes
- Feedback: Zoe‚Äôs voice grows clearer with each correct alignment
import pygame
import random

pygame.init()
screen = pygame.display.set_mode((800, 600))
clock = pygame.time.Clock()
font = pygame.font.Font(None, 36)

# Glyphs and target sequence
glyphs = [random.randint(0, 9) for _ in range(5)]
target = [3, 7, 2, 5, 1]
selected = 0
timer = 60
success = False

def draw_ui():
    screen.fill((10, 10, 30))
    for i, val in enumerate(glyphs):
        color = (0, 255, 180) if i == selected else (100, 100, 100)
        pygame.draw.rect(screen, color, (100 + i*120, 250, 80, 80))
        text = font.render(str(val), True, (255, 255, 255))
        screen.blit(text, (120 + i*120, 270))
    timer_text = font.render(f"Time: {int(timer)}s", True, (255, 100, 100))
    screen.blit(timer_text, (600, 50))

running = True
while running:
    dt = clock.tick(60) / 1000
    timer -= dt
    if timer <= 0:
        running = False

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                selected = (selected - 1) % len(glyphs)
            elif event.key == pygame.K_RIGHT:
                selected = (selected + 1) % len(glyphs)
            elif event.key == pygame.K_UP:
                glyphs[selected] = (glyphs[selected] + 1) % 10
            elif event.key == pygame.K_DOWN:
                glyphs[selected] = (glyphs[selected] - 1) % 10

    if glyphs == target:
        success = True
        running = False

    draw_ui()
    pygame.display.update()

if success:
    print("Decryption successful. Zoe‚Äôs echo unlocked.")
else:
    print("Decryption failed. Memory shard destabilized.")

üéûÔ∏è Yamam Breach Sequence Animation
üé¨ Sequence Flow
- Thermal Scan Overlay: Detects hostage heat signatures
- Flashbang Pulse: Screen flashes white with audio cue
- Entry Frames: Yamam operatives breach door in 5-frame loop
- Extraction: Hostages escorted under fire, heartbeat monitor pulsing
üñºÔ∏è Frame-Based Animation Snippet
class YamamBreach:
    def __init__(self, screen):
        self.screen = screen
        self.frames = [pygame.image.load(f"yamam_breach_{i}.png") for i in range(1, 6)]
        self.current = 0
        self.timer = 0
        self.font = pygame.font.Font(None, 28)

    def update(self, dt):
        self.timer += dt
        if self.timer > 0.2:
            self.current = (self.current + 1) % len(self.frames)
            self.timer = 0

    def render(self):
        self.screen.blit(self.frames[self.current], (0, 0))
        label = self.font.render("Yamam breach in progress...", True, (255, 255, 255))
        self.screen.blit(label, (50, 550))

import pygame
import random

pygame.init()
screen = pygame.display.set_mode((800, 600))
clock = pygame.time.Clock()
font = pygame.font.Font(None, 36)

# Glyphs and target sequence
glyphs = [random.randint(0, 9) for _ in range(5)]
target = [3, 7, 2, 5, 1]
selected = 0
timer = 60
success = False

def draw_ui():
    screen.fill((10, 10, 30))
    for i, val in enumerate(glyphs):
        color = (0, 255, 180) if i == selected else (100, 100, 100)
        pygame.draw.rect(screen, color, (100 + i*120, 250, 80, 80))
        text = font.render(str(val), True, (255, 255, 255))
        screen.blit(text, (120 + i*120, 270))
    timer_text = font.render(f"Time: {int(timer)}s", True, (255, 100, 100))
    screen.blit(timer_text, (600, 50))

running = True
while running:
    dt = clock.tick(60) / 1000
    timer -= dt
    if timer <= 0:
        running = False

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                selected = (selected - 1) % len(glyphs)
            elif event.key == pygame.K_RIGHT:
                selected = (selected + 1) % len(glyphs)
            elif event.key == pygame.K_UP:
                glyphs[selected] = (glyphs[selected] + 1) % 10
            elif event.key == pygame.K_DOWN:
                glyphs[selected] = (glyphs[selected] - 1) % 10

    if glyphs == target:
        success = True
        running = False

    draw_ui()
    pygame.display.update()

if success:
    print("Decryption successful. Zoe‚Äôs echo unlocked.")
else:
    print("Decryption failed. Memory shard destabilized.")

 Sequence Flow
- Thermal Scan Overlay: Detects hostage heat signatures
- Flashbang Pulse: Screen flashes white with audio cue
- Entry Frames: Yamam operatives breach door in 5-frame loop
- Extraction: Hostages escorted under fire, heartbeat monitor pulsing
üñºÔ∏è Frame-Based Animation Snippet
class YamamBreach:
    def __init__(self, screen):
        self.screen = screen
        self.frames = [pygame.image.load(f"yamam_breach_{i}.png") for i in range(1, 6)]
        self.current = 0
        self.timer = 0
        self.font = pygame.font.Font(None, 28)

    def update(self, dt):
        self.timer += dt
        if self.timer > 0.2:
            self.current = (self.current + 1) % len(self.frames)
            self.timer = 0

    def render(self):
        self.screen.blit(self.frames[self.current], (0, 0))
        label = self.font.render("Yamam breach in progress...", True, (255, 255, 255))
        self.screen.blit(label, (50, 550))

class YamamBreach:
    def __init__(self, screen):
        self.screen = screen
        self.frames = [pygame.image.load(f"yamam_breach_{i}.png") for i in range(1, 6)]
        self.current = 0
        self.timer = 0
        self.font = pygame.font.Font(None, 28)

    def update(self, dt):
        self.timer += dt
        if self.timer > 0.2:
            self.current = (self.current + 1) % len(self.frames)
            self.timer = 0

    def render(self):
        self.screen.blit(self.frames[self.current], (0, 0))
        label = self.font.render("Yamam breach in progress...", True, (255, 255, 255))
        self.screen.blit(label, (50, 550))

class ZoeRevealCutscene:
    def __init__(self, screen):
        self.screen = screen
        self.frames = [pygame.image.load(f"zoe_reveal_{i}.png") for i in range(1, 6)]
        self.current = 0
        self.timer = 0
        self.font = pygame.font.Font(None, 32)
        self.dialogue = [
            "Zoe: I knew all along, Dad.",
            "Zoe: You weren‚Äôt just fixing servers...",
            "Zoe: You were saving lives.",
            "Zoe: I saw the encrypted logs. I saw you.",
            "Zoe: You‚Äôre OISTARIAN. And I‚Äôm proud of you."
        ]
        self.dialogue_index = 0
        self.dialogue_timer = 0

    def update(self, dt):
        self.timer += dt
        self.dialogue_timer += dt
        if self.timer > 0.3:
            self.current = (self.current + 1) % len(self.frames)
            self.timer = 0
        if self.dialogue_timer > 2 and self.dialogue_index < len(self.dialogue) - 1:
            self.dialogue_index += 1
            self.dialogue_timer = 0

    def render(self):
        self.screen.blit(self.frames[self.current], (0, 0))
        text = self.font.render(self.dialogue[self.dialogue_index], True, (255, 255, 255))
        self.screen.blit(text, (100, 500))

intel_overlay = [
    "Agent Codename: OISTARIAN",
    "Cover Identity: Data Engineer, Tel Aviv",
    "Real Role: Mossad Tactical Liaison",
    "Operation Count: 47 successful extractions",
    "Last Mission: Hostage rescue, Nuseirat"
]

class HostageReunion:
    def __init__(self, screen):
        self.screen = screen
        self.frames = [pygame.image.load(f"reunion_frame_{i}.png") for i in range(1, 6)]
        self.current = 0
        self.timer = 0
        self.font = pygame.font.Font(None, 28)

    def update(self, dt):
        self.timer += dt
        if self.timer > 0.25:
            self.current = (self.current + 1) % len(self.frames)
            self.timer = 0

    def render(self):
        self.screen.blit(self.frames[self.current], (0, 0))
        label = self.font.render("Hostages reunited. Zoe‚Äôs echo pulsing.", True, (255, 255, 255))
        self.screen.blit(label, (50, 550))

ZOE_FINAL_LOG = {
    "timestamp": "04:17:32",
    "location": "Encrypted Vault, Nuseirat",
    "message": "Dad, I knew. I always knew. You were never just a data engineer. You were OISTARIAN. And I love you for it."
}

class ZoeFinalHug:
    def __init__(self, screen):
        self.screen = screen
        self.frames = [pygame.image.load(f"zoe_hug_{i}.png") for i in range(1, 6)]
        self.current = 0
        self.timer = 0
        self.font = pygame.font.Font(None, 32)
        self.dialogue = [
            "Zoe: You came back.",
            "OISTARIAN: I never stopped trying.",
            "Zoe: I knew you were the super-agent.",
            "Zoe: I just wanted you to be safe.",
            "Zoe: Welcome home, Dad."
        ]
        self.dialogue_index = 0
        self.dialogue_timer = 0

    def update(self, dt):
        self.timer += dt
        self.dialogue_timer += dt
        if self.timer > 0.3:
            self.current = (self.current + 1) % len(self.frames)
            self.timer = 0
        if self.dialogue_timer > 2 and self.dialogue_index < len(self.dialogue) - 1:
            self.dialogue_index += 1
            self.dialogue_timer = 0

    def render(self):
        self.screen.blit(self.frames[self.current], (0, 0))
        text = self.font.render(self.dialogue[self.dialogue_index], True, (255, 255, 255))
        self.screen.blit(text, (100, 500))

OISTARIAN_LEGACY = {
    "codename": "OISTARIAN",
    "cover_identity": "Data Engineer, Tel Aviv",
    "true_role": "Mossad Tactical Liaison, Emotional Recon Specialist",
    "missions_completed": 47,
    "final_mission": "Operation Arnon ‚Äî Hostage Rescue, Nuseirat",
    "emotional_core": {
        "daughter": "Zoe",
        "final_echo": "You were never just fixing servers. You were saving lives. And I love you for it."
    },
    "status": "Returned Home. Legacy Archived."
}

class FinalLiberationScene:
    def __init__(self, screen, scene_manager):
        self.screen = screen
        self.scene_manager = scene_manager
        self.frames = [pygame.image.load(f"liberation_frame_{i}.png") for i in range(1, 6)]
        self.current = 0
        self.timer = 0
        self.font = pygame.font.Font(None, 32)
        self.dialogue = [
            "OISTARIAN: The silence ends here.",
            "Zoe: You were never just a shadow.",
            "OISTARIAN: I archived the pain. Now I choose the light.",
            "Zoe: Then let‚Äôs rewrite the legend. Together.",
            "System: Final Liberation protocol complete."
        ]
        self.index = 0
        self.dialogue_timer = 0

    def update(self, dt):
        self.timer += dt
        self.dialogue_timer += dt
        if self.timer > 0.3:
            self.current = (self.current + 1) % len(self.frames)
            self.timer = 0
        if self.dialogue_timer > 2 and self.index < len(self.dialogue) - 1:
            self.index += 1
            self.dialogue_timer = 0

    def render(self):
        self.screen.blit(self.frames[self.current], (0, 0))
        text = self.font.render(self.dialogue[self.index], True, (255, 255, 255))
        self.screen.blit(text, (100, 500))

class LegacyArchive:
    def __init__(self, screen):
        self.screen = screen
        self.overlay = pygame.Surface((800, 600), pygame.SRCALPHA)
        self.overlay.fill((0, 255, 180, 40))
        self.font = pygame.font.Font(None, 28)
        self.logs = [
            "Legacy File: OISTARIAN",
            "Missions Completed: 47",
            "Cover Identity: Data Engineer",
            "True Role: Mossad Tactical Liaison",
            "Emotional Core: Zoe ‚Äî Final Echo Synced"
        ]
        self.index = 0
        self.timer = 0

    def update(self, dt):
        self.timer += dt
        if self.timer > 1 and self.index < len(self.logs) - 1:
            self.index += 1
            self.timer = 0

    def render(self):
        self.screen.blit(self.overlay, (0, 0))
        for i in range(self.index + 1):
            text = self.font.render(self.logs[i], True, (255, 255, 255))
            self.screen.blit(text, (50, 100 + i * 40))

class EchoReversalScene:
    def __init__(self, screen, scene_manager):
        self.screen = screen
        self.scene_manager = scene_manager
        self.bg = pygame.image.load("vault_core.png").convert()
        self.font = pygame.font.Font(None, 30)
        self.dialogue = [
            "Zoe: The vault isn‚Äôt just data. It‚Äôs memory.",
            "OISTARIAN: Synthetic echoes. Rewritten truths.",
            "Zoe: If they can rewrite memories‚Ä¶ we‚Äôll rewrite the truth.",
            "System: Echo Reversal protocol initiated."
        ]
        self.index = 0
        self.timer = 0

    def update(self, dt):
        self.timer += dt
        if self.timer > 2 and self.index < len(self.dialogue) - 1:
            self.index += 1
            self.timer = 0

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        text = self.font.render(self.dialogue[self.index], True, (255, 255, 255))
        self.screen.blit(text, (80, 500))

class ZoeTacticalUI:
    def __init__(self, screen):
        self.screen = screen
        self.overlay = pygame.Surface((800, 600), pygame.SRCALPHA)
        self.overlay.fill((0, 255, 180, 40))
        self.font = pygame.font.Font(None, 26)
        self.modules = [
            "Neural Pulse Grid: Synced",
            "Echo Shield: Active",
            "Memory Shard Scanner: Online",
            "Vault Coordinates: Locked"
        ]
        self.index = 0
        self.timer = 0

    def update(self, dt):
        self.timer += dt
        if self.timer > 1 and self.index < len(self.modules) - 1:
            self.index += 1
            self.timer = 0

    def render(self):
        self.screen.blit(self.overlay, (0, 0))
        for i in range(self.index + 1):
            text = self.font.render(self.modules[i], True, (255, 255, 255))
            self.screen.blit(text, (50, 100 + i * 40))

ENCRYPTED_VAULT_MAP = {
    "Vault Alpha": {"location": "Echo Swamp", "status": "Locked", "key": "Precision Analyzer"},
    "Vault Sigma": {"location": "Sterile Land", "status": "Unlocked", "key": "Ultra Analyzer"},
    "Vault Omega": {"location": "Agna Desert", "status": "Corrupted", "key": "Code Breaker"},
    "Vault Zeta": {"location": "Fortress", "status": "Hidden", "key": "Neural Sync"},
    "Vault Eden": {"location": "White-Night Gulch", "status": "Encrypted", "key": "Zoe‚Äôs Echo"}
}



