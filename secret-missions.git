mission_dust_protocol = {
    "terrain": "Shifting dunes, electromagnetic storms",
    "enemies": ["Echo Wraiths", "Vault Sentinels"],
    "gear_required": ["Sand Pulse Boots", "Echo Scanner"],
    "tactical_twist": "Vault only opens during solar flare window"
}

mission_minaret_cipher = {
    "puzzle_type": "Visual decryption",
    "interface": "Zoe’s Tactical UI overlays ancient script",
    "threats": ["Memory Hijackers", "Echo Disruptors"],
    "reward": "Vault Sigma access key"
}

mission_neural_mirage = {
    "map_type": "Echo-generated illusion grid",
    "challenge": "Distinguish real vs synthetic memories",
    "boss": "OISTARIAN Echo Architect",
    "outcome": "Unlock Zoe’s Echo Sync ability"
}

mission_skyline_reversal = {
    "entry_method": "Vertical Echo Climb",
    "interface": "Zoe’s dual-agent combat rig",
    "enemies": ["Vault Guardians", "Echo Loopers"],
    "finale": "Drop the Eden Vault Map"
}

class EchoSyncCombat:
    def __init__(self, screen):
        self.screen = screen
        self.bg = pygame.image.load("gulch_arena.png").convert()
        self.effects = ["Pulse Slash", "Memory Shatter", "Echo Warp", "Neural Overdrive"]
        self.index = 0
        self.timer = 0
        self.font = pygame.font.Font(None, 28)

    def update(self, dt):
        self.timer += dt
        if self.timer > 1.5 and self.index < len(self.effects) - 1:
            self.index += 1
            self.timer = 0

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        for i in range(self.index + 1):
            effect_text = self.font.render(f"Zoe activates: {self.effects[i]}", True, (255, 100, 255))
            self.screen.blit(effect_text, (60, 100 + i * 40))

vault_eden_puzzle = {
    "layers": [
        {"type": "Neural Cipher Grid", "challenge": "Align memory shards to form Zoe’s childhood echo"},
        {"type": "Echo Frequency Lock", "challenge": "Match pulse tones to Eden’s encrypted rhythm"},
        {"type": "Synthetic Truth Maze", "challenge": "Navigate false memories to reach the core"}
    ],
    "final_key": "ZOE-ECHO-REWRITE",
    "reward": "Vault Eden opens, revealing the Echo Reversal truth"
}

final_showdown_script = [
    "Zoe stands atop the frozen ridge, Echo Sync pulsing through her veins.",
    "OISTARIAN: You were never meant to remember.",
    "Zoe: That’s why I rewrote the ending.",
    "*Vault Eden erupts in light, memories cascade across the sky.*",
    "System: Echo Reversal complete. Truth restored."
]

class EchoWarpLoop:
    def __init__(self, screen):
        self.screen = screen
        self.bg = pygame.image.load("warp_core.png").convert()
        self.warp_effects = ["Echo Pulse", "Time Fold", "Memory Ripple", "Neural Surge"]
        self.index = 0
        self.timer = 0
        self.font = pygame.font.Font(None, 32)

    def update(self, dt):
        self.timer += dt
        if self.timer > 1.2 and self.index < len(self.warp_effects) - 1:
            self.index += 1
            self.timer = 0

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        for i in range(self.index + 1):
            effect = self.font.render(f"Zoe initiates: {self.warp_effects[i]}", True, (0, 255, 180))
            self.screen.blit(effect, (70, 120 + i * 50))

class OistarianBoss:
    def __init__(self, screen):
        self.screen = screen
        self.bg = pygame.image.load("eden_arena.png").convert()
        self.health = 1000
        self.phase = 1
        self.attacks = {
            1: ["Echo Blast", "Memory Drain"],
            2: ["Neural Collapse", "Truth Reversal"],
            3: ["Vault Implosion", "Echo Storm"]
        }
        self.font = pygame.font.Font(None, 28)

    def update(self, dt):
        if self.health < 700:
            self.phase = 2
        if self.health < 300:
            self.phase = 3

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        phase_text = self.font.render(f"OISTARIAN Phase {self.phase}", True, (255, 0, 0))
        self.screen.blit(phase_text, (50, 50))
        for i, attack in enumerate(self.attacks[self.phase]):
            attack_text = self.font.render(f"Attack: {attack}", True, (255, 255, 255))
            self.screen.blit(attack_text, (60, 100 + i * 40))

class EchoWarpLoop:
    def __init__(self, screen):
        self.screen = screen
        self.bg = pygame.image.load("warp_core.png").convert()
        self.warp_effects = ["Echo Pulse", "Time Fold", "Memory Ripple", "Neural Surge"]
        self.index = 0
        self.timer = 0
        self.font = pygame.font.Font(None, 32)

    def update(self, dt):
        self.timer += dt
        if self.timer > 1.2 and self.index < len(self.warp_effects) - 1:
            self.index += 1
            self.timer = 0

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        for i in range(self.index + 1):
            effect = self.font.render(f"Zoe initiates: {self.warp_effects[i]}", True, (0, 255, 180))
            self.screen.blit(effect, (70, 120 + i * 50))

class OistarianBoss:
    def __init__(self, screen):
        self.screen = screen
        self.bg = pygame.image.load("eden_arena.png").convert()
        self.health = 1000
        self.phase = 1
        self.attacks = {
            1: ["Echo Blast", "Memory Drain"],
            2: ["Neural Collapse", "Truth Reversal"],
            3: ["Vault Implosion", "Echo Storm"]
        }
        self.font = pygame.font.Font(None, 28)

    def update(self, dt):
        if self.health < 700:
            self.phase = 2
        if self.health < 300:
            self.phase = 3

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        phase_text = self.font.render(f"OISTARIAN Phase {self.phase}", True, (255, 0, 0))
        self.screen.blit(phase_text, (50, 50))
        for i, attack in enumerate(self.attacks[self.phase]):
            attack_text = self.font.render(f"Attack: {attack}", True, (255, 255, 255))
            self.screen.blit(attack_text, (60, 100 + i * 40))

vault_eden_archive = {
    "Memory Shard 01": {
        "origin": "Zoe’s childhood echo",
        "type": "Emotional",
        "access": "Unlocked"
    },
    "Memory Shard 02": {
        "origin": "OISTARIAN betrayal",
        "type": "Synthetic",
        "access": "Encrypted"
    },
    "Memory Shard 03": {
        "origin": "Echo Reversal protocol",
        "type": "Tactical",
        "access": "Unlocked"
    },
    "Memory Shard 04": {
        "origin": "Vault Eden bloom",
        "type": "Visionary",
        "access": "Hidden"
    }
}

echo_pulse_finale = {
    "activation": "Final Echo Pulse from Vault Eden core",
    "visual": "Aurora wave erupting across neural grid",
    "soundtrack": "‘Memory Rewritten’ — ethereal synth fusion",
    "effect": "Echo harmonization restores fractured timelines",
    "Zoe_dialogue": "I didn’t just survive the echo… I became it."
}

eden_bloom_animation = {
    "stage_1": "Core pulse expands into fractal light",
    "stage_2": "Memory petals bloom from the neural vines",
    "stage_3": "Eden's truth archive unlocks",
    "Zoe": {
        "pose": "Silhouetted against the bloom",
        "action": "Final memory merge"
    }
}

truth_reversal_protocol = {
    "step_1": "Activate Eden’s Vault override",
    "step_2": "Inject Zoe’s Echo Rewrite key",
    "step_3": "Recode all synthetic memories",
    "result": "System-wide restoration of historical truth"
}

vault_eden_deep_file = {
    "Echo Core": "ZOE-ECHO-REWRITE",
    "Truth Archive": ["Memory Shard 01", "Memory Shard 03", "Vault Bloom Sequence"],
    "Hidden Layer": {
        "OISTARIAN Signature": "Phase 3 - Echo Storm",
        "Zoe’s Final Sync": "Echo Pulse Finale"
    },
    "Memorial Protocol": "Activated"
}

🕯️ Memorial Protocol: Eden Ben Rub, Osher Barzilay & All We’ve Lost
On October 7, 2023, the world changed. Among the many lives tragically taken in the Hamas attack, we remember:
- Sgt. Osher Simha Barzilay, 19, a gifted neuroscience student and MDA volunteer, who dreamed of becoming a brain surgeon
- Eden Ben Rub, whose name echoes in remembrance alongside countless others lost that day
Their stories are etched into the Vault Eden memorial layer — not as data, but as light. A national ceremony held in Tel Aviv honored their memory with music, poetry, and unity.
class EchoBloomTribute:
    def __init__(self, screen):
        self.screen = screen
        self.bg = pygame.image.load("eden_memorial.png").convert()
        self.particles = []
        self.timer = 0
        self.font = pygame.font.Font(None, 28)
        self.names = ["Eden Ben Rub", "Osher Barzilay", "October 7 Memorial"]

    def update(self, dt):
        self.timer += dt
        if self.timer > 1:
            self.particles.append({"x": 400, "y": 300, "radius": 2, "alpha": 255})
            self.timer = 0
        for p in self.particles:
            p["radius"] += 0.5
            p["alpha"] -= 5

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        for p in self.particles:
            surface = pygame.Surface((800, 600), pygame.SRCALPHA)
            pygame.draw.circle(surface, (255, 255, 255, p["alpha"]), (p["x"], p["y"]), int(p["radius"]))
            self.screen.blit(surface, (0, 0))
        for i, name in enumerate(self.names):
            text = self.font.render(f"In memory of: {name}", True, (255, 255, 255))
            self.screen.blit(text, (50, 500 + i * 30))

memorial_archive_ui = {
    "interface": "Vault Eden Memory Console",
    "sections": [
        {"title": "October 7 Echoes", "type": "Timeline", "entries": ["Eden Ben Rub", "Osher Barzilay", "Others lost"]},
        {"title": "Personal Shards", "type": "Audio/Visual", "entries": ["Family messages", "Volunteer stories"]},
        {"title": "Global Resonance", "type": "Tributes", "entries": ["Poems", "Art", "Music"]}
    ],
    "interaction": "Scroll, tap, and echo playback"
}

class TruthPulseBeacon:
    def __init__(self, screen):
        self.screen = screen
        self.bg = pygame.image.load("truth_beacon.png").convert()
        self.pulse_radius = 0
        self.font = pygame.font.Font(None, 36)

    def update(self, dt):
        self.pulse_radius += 1
        if self.pulse_radius > 300:
            self.pulse_radius = 0

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        pygame.draw.circle(self.screen, (0, 255, 180), (400, 300), self.pulse_radius, 2)
        text = self.font.render("Truth Pulse Activated", True, (255, 255, 255))
        self.screen.blit(text, (250, 550))

echo_bloom_poem = [
    "In Eden’s vault, the echoes bloom,",
    "Soft petals of memory in digital gloom.",
    "Names like stars in a fractured sky,",
    "We remember, we honor, we never say goodbye.",
    "October’s silence, broken by flame,",
    "Each light a soul, each soul a name."
]

tribute_wall = {
    "title": "October 7 Memorial Wall",
    "panels": [
        {"name": "Eden Ben Rub", "age": "Unknown", "role": "Civilian"},
        {"name": "Osher Barzilay", "age": "19", "role": "Soldier, MDA Volunteer"},
        {"name": "Unnamed Souls", "age": "Various", "role": "Victims of Terror"}
    ],
    "interaction": "Hover to reveal personal echoes",
    "visuals": "Stone-textured panels with glowing inscriptions"
}

class RemembranceFlame:
    def __init__(self, screen):
        self.screen = screen
        self.bg = pygame.image.load("eden_flame_bg.png").convert()
        self.flame_particles = []
        self.timer = 0
        self.font = pygame.font.Font(None, 28)
        self.names = ["Eden Ben Rub", "Osher Barzilay", "All We’ve Lost"]

    def update(self, dt):
        self.timer += dt
        if self.timer > 0.8:
            self.flame_particles.append({"x": 400, "y": 500, "radius": 3, "alpha": 255})
            self.timer = 0
        for p in self.flame_particles:
            p["y"] -= 1
            p["radius"] += 0.3
            p["alpha"] -= 4

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        for p in self.flame_particles:
            surface = pygame.Surface((800, 600), pygame.SRCALPHA)
            pygame.draw.circle(surface, (255, 100, 0, p["alpha"]), (p["x"], int(p["y"])), int(p["radius"]))
            self.screen.blit(surface, (0, 0))
        for i, name in enumerate(self.names):
            text = self.font.render(f"In memory of: {name}", True, (255, 255, 255))
            self.screen.blit(text, (50, 520 + i * 30))

import pygame
pygame.init()
pygame.mixer.init()

# Load and play the elegy track
pygame.mixer.music.load("echo_bloom_elegy.mp3")
pygame.mixer.music.set_volume(0.7)
pygame.mixer.music.play(-1)  # Loop indefinitely

# Elegy metadata
elegy_track = {
    "title": "Echo Bloom Elegy",
    "composer": "Neural Harmonics Collective",
    "style": "Ambient synth + memory tones",
    "emotion": "Resonant sorrow, luminous hope"
}

class CandleVigil:
    def __init__(self, screen):
        self.screen = screen
        self.bg = pygame.image.load("eden_vigil_bg.png").convert()
        self.candles = [{"x": 100 + i * 120, "y": 500, "flame": 5} for i in range(5)]
        self.font = pygame.font.Font(None, 28)
        self.names = ["Eden Ben Rub", "Osher Barzilay", "October 7 Echoes"]

    def update(self, dt):
        for c in self.candles:
            c["flame"] += 0.2 * (-1 if c["flame"] > 7 else 1)

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        for c in self.candles:
            pygame.draw.circle(self.screen, (255, 180, 100), (c["x"], c["y"]), int(c["flame"]))
        for i, name in enumerate(self.names):
            text = self.font.render(f"In memory of: {name}", True, (255, 255, 255))
            self.screen.blit(text, (50, 550 + i * 30))

class NeuralSky:
    def __init__(self, screen):
        self.screen = screen
        self.bg = pygame.image.load("neural_sky.png").convert()
        self.stars = [{"x": i * 100 + 50, "y": 100 + (i % 3) * 60, "name": n} for i, n in enumerate([
            "Eden Ben Rub", "Osher Barzilay", "Unnamed Echo", "October 7 Light", "Vault Eden Witness"
        ])]
        self.font = pygame.font.Font(None, 24)

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        for star in self.stars:
            pygame.draw.circle(self.screen, (200, 255, 255), (star["x"], star["y"]), 3)
            text = self.font.render(star["name"], True, (255, 255, 255))
            self.screen.blit(text, (star["x"] - 40, star["y"] + 10))

remembrance_flame_poem = [
    "From Eden’s flame, the echoes rise,",
    "Names like embers in twilight skies.",
    "October’s sorrow, etched in light,",
    "We carry their memory into the night.",
    "Each flicker a soul, each glow a vow,",
    "To remember, to honor, here and now."
]

class MemoryLanterns:
    def __init__(self, screen):
        self.screen = screen
        self.bg = pygame.image.load("eden_lantern_bg.png").convert()
        self.lanterns = [{"x": 100 + i * 120, "y": 600, "rise": 0} for i in range(5)]
        self.font = pygame.font.Font(None, 26)
        self.names = ["Eden Ben Rub", "Osher Barzilay", "October 7 Echoes"]

    def update(self, dt):
        for lantern in self.lanterns:
            lantern["y"] -= 0.5
            lantern["rise"] += 0.2

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        for lantern in self.lanterns:
            pygame.draw.rect(self.screen, (255, 200, 150), (lantern["x"], int(lantern["y"]), 20, 30))
        for i, name in enumerate(self.names):
            text = self.font.render(f"Lantern for: {name}", True, (255, 255, 255))
            self.screen.blit(text, (50, 520 + i * 30))

class TruthConstellationMap:
    def __init__(self, screen):
        self.screen = screen
        self.bg = pygame.image.load("constellation_map.png").convert()
        self.stars = [{"x": 100 + i * 120, "y": 100 + (i % 3) * 60, "name": n} for i, n in enumerate([
            "Eden Ben Rub", "Osher Barzilay", "October 7 Light", "Vault Witness", "Echo Bloom Soul"
        ])]
        self.font = pygame.font.Font(None, 24)

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        for star in self.stars:
            pygame.draw.circle(self.screen, (200, 255, 255), (star["x"], star["y"]), 3)
            text = self.font.render(star["name"], True, (255, 255, 255))
            self.screen.blit(text, (star["x"] - 40, star["y"] + 10))

echo_constellation_elegy = [
    "Above Eden’s vault, the stars align,",
    "Each name a beacon, each soul divine.",
    "October’s echoes drift through space,",
    "A silent vow, a glowing trace.",
    "We chart their light, we hold their flame,",
    "In every star, we speak their name."
]

vault_sky_altar = {
    "structure": "Floating altar of neural crystal and echo vines",
    "location": "Above Vault Eden’s bloom core",
    "features": [
        "Memory shard offerings",
        "Echo lanterns suspended in orbit",
        "Names etched in aurora light"
    ],
    "interaction": "Tap to release tribute light pulses"
}

class LightCascade:
    def __init__(self, screen):
        self.screen = screen
        self.bg = pygame.image.load("eden_cascade_bg.png").convert()
        self.lights = [{"x": 100 + i * 120, "y": 0, "alpha": 255} for i in range(5)]
        self.font = pygame.font.Font(None, 28)
        self.names = ["Eden Ben Rub", "Osher Barzilay", "October 7 Echoes"]

    def update(self, dt):
        for light in self.lights:
            light["y"] += 1
            light["alpha"] -= 1

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        for light in self.lights:
            surface = pygame.Surface((800, 600), pygame.SRCALPHA)
            pygame.draw.circle(surface, (255, 255, 200, light["alpha"]), (light["x"], int(light["y"])), 6)
            self.screen.blit(surface, (0, 0))
        for i, name in enumerate(self.names):
            text = self.font.render(f"Light for: {name}", True, (255, 255, 255))
            self.screen.blit(text, (50, 520 + i * 30))

aurora_requiem_poem = [
    "Vault Eden breathes in spectral light,",
    "Auroras bloom through memory’s night.",
    "October’s echoes shimmer and rise,",
    "A requiem sung in celestial skies.",
    "Each pulse a name, each glow a vow,",
    "We remember — then, now, and always."
]

class SkyVigil:
    def __init__(self, screen):
        self.screen = screen
        self.bg = pygame.image.load("sky_vigil_bg.png").convert()
        self.stars = [{"x": 100 + i * 120, "y": 100 + (i % 3) * 60, "name": n} for i, n in enumerate([
            "Eden Ben Rub", "Osher Barzilay", "October 7 Light", "Vault Witness", "Echo Bloom Soul"
        ])]
        self.font = pygame.font.Font(None, 24)
        self.timer = 0
        self.pulse = 0

    def update(self, dt):
        self.timer += dt
        self.pulse = (self.timer % 2) * 5

    def render(self):
        self.screen.blit(self.bg, (0, 0))
        for star in self.stars:
            pygame.draw.circle(self.screen, (200, 255, 255), (star["x"], star["y"]), 3 + self.pulse)
            text = self.font.render(star["name"], True, (255, 255, 255))
            self.screen.blit(text, (star["x"] - 40, star["y"] + 10))

